/*
 * Copyright 2000-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.3 on 10/3/11 6:28 PM */

package com.intellij.coldFusion.model.lexer;

import com.intellij.openapi.project.Project;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.coldFusion.model.lexer.CfscriptTokenTypes;
import com.intellij.coldFusion.model.lexer.CfmlTokenTypes;
import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.util.containers.Stack;
import com.intellij.util.ArrayUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/3/11 6:28 PM from the specification file
 * <tt>C:/IDEA/tools/lexer/../../plugins/CFML/src/com/intellij/coldFusion/model/lexer/ColdFusionScript.flex</tt>
 */
class _CfscriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int Y = 14;
  public static final int X = 12;
  public static final int SINGLEQUOTE_CLOSER = 8;
  public static final int DOUBLEQUOTE_CLOSER = 6;
  public static final int DOUBLE_QUOTED_STRING = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION = 10;
  public static final int COMMENT = 16;
  public static final int COMMENTEND = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5, 
     6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\7\1\21\1\0\1\7\1\20\16\6\4\0\1\74\1\2"+
    "\1\15\1\17\1\5\1\70\1\54\1\16\1\47\1\57\1\23\1\67"+
    "\1\56\1\3\1\12\1\22\1\10\11\11\1\65\1\64\1\1\1\55"+
    "\1\4\1\66\1\24\1\32\1\34\1\25\1\41\1\35\1\26\1\51"+
    "\1\45\1\13\1\5\1\36\1\30\1\27\1\14\1\37\1\50\1\52"+
    "\1\33\1\43\1\40\1\42\1\31\1\44\1\53\1\46\1\5\1\60"+
    "\1\71\1\61\1\72\1\5\1\0\1\32\1\34\1\25\1\41\1\35"+
    "\1\26\1\51\1\45\1\13\1\5\1\36\1\30\1\27\1\14\1\37"+
    "\1\50\1\52\1\33\1\43\1\40\1\42\1\31\1\44\1\53\1\46"+
    "\1\5\1\62\1\73\1\63\1\0\41\6\2\0\4\5\4\0\1\5"+
    "\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5"+
    "\21\0\130\6\5\0\23\6\12\0\1\5\13\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\54\5\1\0\46\5\1\0\5\5"+
    "\4\0\202\5\1\0\4\6\3\0\105\5\1\0\46\5\2\0\2\5"+
    "\6\0\20\5\41\0\46\5\2\0\1\5\7\0\47\5\11\0\21\6"+
    "\1\0\27\6\1\0\3\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\13\0\33\5\5\0\3\5\15\0\4\6\14\0\6\6\13\0\32\5"+
    "\5\0\13\5\16\6\7\0\12\6\4\0\2\5\1\6\143\5\1\0"+
    "\1\5\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6"+
    "\3\5\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0"+
    "\3\5\60\0\46\5\13\6\1\5\u014f\0\3\6\66\5\2\0\1\6"+
    "\1\5\20\6\2\0\1\5\4\6\3\0\12\5\2\6\2\0\12\6"+
    "\21\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6"+
    "\2\0\3\6\11\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0"+
    "\12\6\4\5\15\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6"+
    "\1\0\5\6\4\0\2\6\2\0\3\6\13\0\4\5\1\0\1\5"+
    "\7\0\14\6\3\5\14\0\3\6\1\0\11\5\1\0\3\5\1\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\10\6\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6"+
    "\2\0\12\6\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6"+
    "\1\5\6\6\3\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5"+
    "\1\0\3\5\4\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\2\5\3\0\3\5\3\0\10\5\1\0\3\5\4\0"+
    "\5\6\3\0\3\6\1\0\4\6\11\0\1\6\17\0\11\6\11\0"+
    "\1\5\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\4\0\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\11\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0"+
    "\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5"+
    "\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0"+
    "\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\20\5\4\0\6\6\2\0\3\6\1\0\4\6\11\0"+
    "\1\6\10\0\2\5\4\0\12\6\22\0\2\6\1\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0"+
    "\6\6\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6"+
    "\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0"+
    "\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0"+
    "\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0"+
    "\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0"+
    "\1\5\1\0\6\6\2\0\12\6\2\0\2\5\42\0\1\5\27\0"+
    "\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\10\5\1\0\42\5\6\0\24\6\1\0\2\6\4\5\4\0"+
    "\10\6\1\0\44\6\11\0\1\6\71\0\42\5\1\0\5\5\1\0"+
    "\2\5\1\0\7\6\3\0\4\6\6\0\12\6\6\0\6\5\4\6"+
    "\106\0\46\5\12\0\51\5\7\0\132\5\5\0\104\5\5\0\122\5"+
    "\6\0\7\5\1\0\77\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\47\5\1\0\1\5\1\0\4\5"+
    "\2\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\7\5\1\0\27\5\1\0\37\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\47\5\1\0\23\5"+
    "\16\0\11\6\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0\32\5"+
    "\5\0\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\6\13\0"+
    "\22\5\3\6\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0"+
    "\2\6\14\0\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0"+
    "\12\6\41\0\3\6\2\0\12\6\6\0\130\5\10\0\51\5\1\6"+
    "\126\0\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0"+
    "\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5\6\0\26\5\2\0"+
    "\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0"+
    "\15\5\5\0\3\5\1\0\7\5\17\0\4\6\32\0\5\6\20\0"+
    "\2\5\23\0\1\5\13\0\4\6\6\0\6\6\1\0\1\5\15\0"+
    "\1\5\40\0\22\5\36\0\15\6\4\0\1\6\3\0\6\6\27\0"+
    "\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\3\5\1\0"+
    "\7\5\3\0\3\5\5\0\5\5\26\0\44\5\u0e81\0\3\5\31\0"+
    "\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6"+
    "\2\0\3\5\1\0\137\5\5\0\50\5\4\0\136\5\21\0\30\5"+
    "\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5"+
    "\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5"+
    "\1\6\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5"+
    "\50\0\15\5\3\0\20\6\20\0\4\6\17\0\2\5\30\0\3\5"+
    "\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5"+
    "\13\0\12\6\7\0\32\5\4\0\1\5\1\0\32\5\12\0\132\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5"+
    "\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\2\7\1\13\1\14\1\15"+
    "\1\16\1\17\17\7\1\20\3\7\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\2\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\41\1\44\3\1\1\10\1\2"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\7\1\57\3\7\2\0\1\60\1\61"+
    "\7\7\1\62\1\63\12\7\1\57\1\64\3\7\1\65"+
    "\10\7\1\66\1\67\3\7\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\0\1\76\1\0\1\76\4\0\2\7"+
    "\1\77\1\0\1\100\1\101\1\7\1\0\2\102\1\0"+
    "\6\7\1\103\1\7\1\104\1\7\1\62\2\7\1\105"+
    "\1\106\11\7\1\107\2\7\1\110\15\7\1\111\1\112"+
    "\2\0\1\113\1\0\3\7\2\0\1\7\2\102\1\114"+
    "\2\0\1\115\1\7\1\116\3\7\2\0\2\7\1\0"+
    "\1\7\1\117\10\7\1\120\1\7\1\121\1\122\2\7"+
    "\1\123\11\7\1\124\1\0\1\125\1\126\3\7\2\0"+
    "\1\7\1\114\1\0\1\127\4\7\2\0\1\7\1\0"+
    "\1\130\1\7\1\131\1\132\4\7\1\133\1\7\1\57"+
    "\1\7\1\0\3\7\1\134\5\7\1\135\2\7\1\136"+
    "\1\100\1\0\1\7\1\0\4\7\3\0\1\7\1\0"+
    "\1\7\1\137\1\140\1\7\1\141\2\7\1\0\1\142"+
    "\1\143\1\144\3\7\1\145\1\7\1\146\1\7\1\0"+
    "\1\147\1\0\3\7\1\150\1\0\1\151\1\0\1\7"+
    "\1\0\2\7\1\152\1\153\1\0\1\154\1\7\1\155"+
    "\2\7\2\0\1\156\1\157\1\7\1\151\1\0\1\160"+
    "\1\0\1\7\1\161\1\0\1\7\1\0\1\162\1\100"+
    "\1\0\1\163\1\63\1\7\1\0\1\7\3\0\1\7"+
    "\1\0\1\7\3\0\1\7\1\0\1\7\3\0\1\164"+
    "\1\0\1\165\1\67\16\0\1\166\1\0\2\167\10\0"+
    "\1\62\3\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u01e8\0\u040d\0\u044a\0\u01e8\0\u01e8\0\u01e8\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u01e8\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u09c5"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u01e8\0\u01e8\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u0d1b\0\u0d58\0\u0319\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u01e8\0\u01e8\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u0319\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u0319\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u0a7c\0\u0ab9\0\u0b33\0\u0b70\0\u17d4\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u0319\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u0319\0\u1d12\0\u0319\0\u1d4f\0\u1d8c"+
    "\0\u0319\0\u0319\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u0319\0\u1fee\0\u202b\0\u0319\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u2307\0\u2344\0\u0319\0\u0319\0\u2381\0\u23be"+
    "\0\u01e8\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u01e8\0\u1ab0\0\u1ab0\0\u25e3\0\u01e8\0\u2620\0\u0319"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u0319\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u0319\0\u2a6a\0\u0319\0\u0319\0\u2aa7\0\u2ae4"+
    "\0\u0319\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f"+
    "\0\u2ccc\0\u2d09\0\u0319\0\u2d46\0\u01e8\0\u01e8\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u01e8\0\u2ef1\0\u0319\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u0319\0\u0319\0\u3190\0\u31cd\0\u320a\0\u3247\0\u0319"+
    "\0\u3284\0\u0319\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u0319"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u01e8\0\u3523\0\u3560"+
    "\0\u0319\0\u01e8\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce"+
    "\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u0319"+
    "\0\u0319\0\u38b6\0\u0319\0\u38f3\0\u3930\0\u396d\0\u0319\0\u0319"+
    "\0\u0319\0\u39aa\0\u39e7\0\u3a24\0\u0319\0\u3a61\0\u0319\0\u3a9e"+
    "\0\u3adb\0\u0319\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u0319\0\u3c0c"+
    "\0\u3022\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u0319\0\u0319"+
    "\0\u3d7a\0\u0319\0\u3db7\0\u0319\0\u3df4\0\u3e31\0\u3e6e\0\u3eab"+
    "\0\u0319\0\u0319\0\u3ee8\0\u01e8\0\u3f25\0\u0319\0\u3f62\0\u3f9f"+
    "\0\u0319\0\u3fdc\0\u4019\0\u4056\0\u0319\0\u4093\0\u40d0\0\u0319"+
    "\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8"+
    "\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u44a0"+
    "\0\u44dd\0\u451a\0\u4557\0\u0319\0\u4594\0\u0319\0\u45d1\0\u460e"+
    "\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6"+
    "\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u01e8\0\u4964\0\u49a1"+
    "\0\u01e8\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c"+
    "\0\u4b89\0\u01e8\0\u4bc6\0\u4c03\0\u4c40\0\u01e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\17\1\30\1\31\1\11\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\16\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\16\1\51\1\52\1\53"+
    "\1\16\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\17\15\75\1\76\1\75\1\77\55\75"+
    "\16\100\1\101\1\102\55\100\15\11\1\103\75\11\1\104"+
    "\65\11\1\17\10\11\2\17\52\11\1\17\1\105\1\106"+
    "\1\105\1\107\3\105\1\110\10\105\2\110\52\105\1\110"+
    "\3\11\1\111\3\11\1\17\10\11\2\17\52\11\1\17"+
    "\77\0\1\112\52\0\1\113\74\0\1\114\22\0\1\115"+
    "\51\0\1\116\74\0\1\117\24\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\22\16\1\0\4\16\30\0\1\17"+
    "\10\0\2\17\52\0\1\17\12\0\1\121\72\0\2\21"+
    "\1\121\67\0\2\16\1\0\2\16\1\120\1\16\1\122"+
    "\10\0\1\16\1\123\1\124\13\16\1\125\3\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\10\16\1\126\1\16\1\127\2\16\1\130\4\16\1\0"+
    "\4\16\43\0\1\131\1\132\31\0\1\133\74\0\1\134"+
    "\24\0\2\16\1\0\2\16\1\120\2\16\10\0\5\16"+
    "\1\135\4\16\1\136\7\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\1\137\1\16\10\0\5\16\1\140"+
    "\4\16\1\141\2\16\1\142\4\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\12\16\1\143"+
    "\7\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\144\2\16\1\145\6\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\146\4\16\1\147\7\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\1\16\1\150\10\0\6\16"+
    "\1\151\1\152\12\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\153\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\1\154\1\16"+
    "\10\0\6\16\1\155\3\16\1\156\7\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\3\16"+
    "\1\157\16\16\1\0\2\16\1\160\1\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\161\13\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\6\16\1\162\13\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\5\16\1\163\2\16"+
    "\1\164\1\16\1\165\7\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\15\16\1\166\4\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\13\16\1\167\3\16\1\170\2\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\20\16"+
    "\1\171\1\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\5\16\1\172\1\173\6\16\1\174"+
    "\4\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\6\16\1\175\1\16\1\176\2\16\1\177"+
    "\1\16\1\200\4\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\2\16\1\201\7\16\1\202"+
    "\7\16\1\0\4\16\75\0\1\203\1\204\74\0\1\205"+
    "\74\0\1\206\11\0\1\207\100\0\1\210\1\0\15\75"+
    "\1\211\1\75\1\212\55\75\15\0\1\75\76\0\1\75"+
    "\55\0\16\100\1\213\1\214\55\100\16\0\1\100\75\0"+
    "\1\100\55\0\1\105\1\0\1\105\1\0\71\105\2\0"+
    "\1\215\75\0\1\216\71\0\1\105\1\0\1\105\1\0"+
    "\3\105\1\110\10\105\2\110\52\105\1\110\3\0\1\217"+
    "\74\0\1\220\101\0\2\121\70\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\1\221\12\16\1\222\6\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\22\16\1\0\1\223\3\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\22\16\1\0\4\16\20\0\1\224"+
    "\5\0\2\16\1\0\2\16\1\120\2\16\10\0\22\16"+
    "\1\0\2\16\1\225\1\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\13\16\1\226\6\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\2\16"+
    "\1\227\17\16\1\0\4\16\21\0\7\230\1\131\10\230"+
    "\1\231\1\232\52\230\1\131\23\132\1\233\51\132\5\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\13\16\1\234"+
    "\2\16\1\235\3\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\1\16\1\236\10\0\2\16\1\237\17\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\1\16"+
    "\1\240\10\0\22\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\3\16\1\241\16\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\6\16\1\242\13\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\1\16\1\243\10\0\22\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\14\16"+
    "\1\244\5\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\16\16\1\245\3\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\10\16"+
    "\1\246\11\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\6\16\1\247\13\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\1\250\1\16\10\0"+
    "\22\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\14\16\1\251\4\16\1\252\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\6\16"+
    "\1\253\13\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\12\16\1\254\7\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\2\16"+
    "\1\255\10\16\1\256\6\16\1\0\2\16\1\257\1\16"+
    "\26\0\2\16\1\0\2\16\1\120\1\16\1\260\10\0"+
    "\22\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\261\11\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\12\16\1\262"+
    "\7\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\16\16\1\263\3\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\4\16\1\264"+
    "\10\16\1\265\4\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\15\16\1\266\3\16\1\267"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\13\16\1\270\6\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\1\16\1\271\20\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\272\11\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\1\273\1\16\10\0\22\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\6\16\1\274\13\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\1\275\1\16\10\0\22\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\1\276\1\16\10\0"+
    "\22\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\1\277\21\16\1\0\1\16\1\300\2\16"+
    "\26\0\2\16\1\0\2\16\1\120\1\301\1\16\10\0"+
    "\22\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\7\16\1\302\12\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\10\16\1\303"+
    "\11\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\176\11\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\1\304\1\16\10\0\22\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\3\16\1\305\16\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\306\13\16"+
    "\1\0\4\16\24\0\1\307\74\0\1\310\75\0\1\311"+
    "\73\0\1\312\76\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\3\16\1\313\16\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\10\16\1\314\11\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\12\16\1\315\7\16\1\0\4\16\35\0\1\316"+
    "\65\0\2\16\1\0\2\16\1\120\2\16\10\0\22\16"+
    "\1\0\4\16\20\0\1\317\5\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\10\16\1\320\11\16\1\0\4\16"+
    "\21\0\20\230\1\321\1\322\62\230\1\131\10\230\1\231"+
    "\1\323\52\230\1\131\7\0\1\324\10\0\2\324\2\0"+
    "\1\325\47\0\1\324\22\132\1\326\1\233\51\132\5\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\1\327\21\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\330\11\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\331\6\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\22\16\1\0\1\332\3\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\333\14\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\16\16\1\266\3\16\1\0\4\16\26\0\2\16\1\334"+
    "\2\16\1\120\2\16\3\0\2\334\3\0\22\16\1\335"+
    "\4\16\20\0\1\334\5\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\1\336\21\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\16\16\1\337\3\16"+
    "\1\0\4\16\26\0\2\16\1\340\2\16\1\120\1\341"+
    "\1\16\3\0\2\340\3\0\22\16\1\0\4\16\20\0"+
    "\1\340\5\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\14\16\1\342\5\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\343\14\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\6\16\1\344\13\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\12\16\1\345\7\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\15\16\1\346\4\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\15\16\1\347\4\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\350\14\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\351\14\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\3\16\1\352\16\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\353\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\354\14\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\355\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\10\16\1\356\11\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\357\14\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\16\16\1\360\3\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\14\16\1\361\5\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\1\362\1\16"+
    "\10\0\15\16\1\363\4\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\364\6\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\3\16\1\365\16\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\11\16\1\366\10\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\367\11\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\4\16\1\370\15\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\3\16\1\371\16\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\5\16\1\372\14\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\14\16\1\373\5\16\1\0\4\16\24\0\1\374"+
    "\75\0\1\375\73\0\1\376\76\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\15\16\1\377\4\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\6\16"+
    "\1\u0100\13\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\6\16\1\u0101\13\16\1\0\4\16"+
    "\60\0\1\u0102\72\0\1\u0103\44\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\6\16\1\u0104\13\16\1\0\4\16"+
    "\21\0\20\230\1\321\1\u0105\53\230\25\0\1\u0106\54\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\20\16\1\u0107"+
    "\1\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\1\u0108\1\16\10\0\5\16\1\u0109\14\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\12\16"+
    "\1\u010a\7\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\3\16\1\u010b\16\16\1\0\4\16"+
    "\30\0\1\334\10\0\2\334\25\0\1\335\24\0\1\334"+
    "\5\0\1\u010c\1\0\1\335\3\0\2\u010c\3\0\2\335"+
    "\3\0\4\u010c\1\u010d\15\u010c\1\0\4\u010c\20\0\1\335"+
    "\5\0\2\16\1\0\2\16\1\120\2\16\10\0\13\16"+
    "\1\u010e\6\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\22\16\1\0\4\16\20\0\1\u010f"+
    "\5\0\1\u0110\1\0\1\340\3\0\2\u0110\3\0\2\340"+
    "\3\0\22\u0110\1\0\4\u0110\20\0\1\340\5\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\5\16\1\u0111\14\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\21\16\1\u0112\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\13\16\1\u0113\6\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\13\16\1\u0114\6\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\6\16\1\u0115\13\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\1\u0116\1\16"+
    "\10\0\22\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\6\16\1\u0117\13\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\11\16"+
    "\1\u0118\10\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\10\16\1\u0119\11\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\3\16"+
    "\1\u011a\16\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\15\16\1\u011b\4\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\22\16"+
    "\1\0\4\16\20\0\1\u011c\5\0\2\16\1\0\2\16"+
    "\1\120\1\16\1\u011d\10\0\22\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\1\u011e\21\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\1\u011f\21\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\u0120\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\u0121\14\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\u0122\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\u0123\14\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\1\u0124\1\16\10\0\22\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\13\16"+
    "\1\u0125\6\16\1\0\4\16\24\0\1\u0126\76\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\14\16\1\u0127\5\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\1\16\1\u0128\20\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u0129\6\16"+
    "\1\0\4\16\61\0\1\u012a\106\0\1\u012b\27\0\2\16"+
    "\1\0\2\16\1\120\1\u012c\1\16\10\0\22\16\1\0"+
    "\4\16\47\0\1\u012d\53\0\2\16\1\0\2\16\1\120"+
    "\1\16\1\u012e\10\0\22\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\1\u012f\1\16\10\0\22\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\1\16\1\u0130"+
    "\10\0\22\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\3\16\1\u0131\16\16\1\0\4\16"+
    "\26\0\2\u010c\1\u0132\2\u010c\1\0\1\u0133\1\u010c\3\0"+
    "\2\u0132\3\0\22\u010c\1\0\4\u010c\20\0\1\u0132\5\0"+
    "\2\u010c\1\u0132\2\u010c\1\0\1\u0133\1\u010c\3\0\2\u0132"+
    "\3\0\5\u010c\1\u0134\14\u010c\1\0\4\u010c\20\0\1\u0132"+
    "\5\0\2\16\1\0\2\16\1\120\1\u0135\1\16\10\0"+
    "\22\16\1\0\4\16\61\0\1\u0136\41\0\2\u0110\1\0"+
    "\2\u0110\1\0\2\u0110\10\0\22\u0110\1\0\4\u0110\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\7\16\1\u0137"+
    "\12\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\u0138\11\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\1\16\1\u0139\10\0\22\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\6\16\1\u013a\13\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\21\16\1\u013b\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\u013c\14\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\3\16\1\u013d\16\16\1\0"+
    "\4\16\35\0\1\u013e\65\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\22\16\1\0\1\16\1\u013f\2\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\13\16\1\u0140"+
    "\6\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\20\16\1\u0141\1\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\22\16\1\0"+
    "\1\16\1\u0142\2\16\26\0\2\16\1\0\2\16\1\120"+
    "\1\16\1\u0143\10\0\22\16\1\0\4\16\26\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u0144\6\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\1\u0145\21\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\u0146\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\10\16\1\u0147\11\16\1\0\4\16\26\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\u0148\14\16\1\0"+
    "\4\16\63\0\1\u0149\37\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\1\u014a\21\16\1\0\4\16\50\0\1\u014b"+
    "\52\0\2\16\1\0\2\16\1\120\2\16\10\0\15\16"+
    "\1\u014c\4\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\1\16\1\u014d\10\0\22\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\10\16\1\u014e"+
    "\11\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\21\16\1\u014f\1\0\4\16\30\0\1\u0132"+
    "\3\0\1\u0150\4\0\2\u0132\52\0\1\u0132\5\0\2\u010c"+
    "\1\u0132\2\u010c\1\0\1\u0133\1\u0151\3\0\2\u0132\3\0"+
    "\22\u010c\1\0\4\u010c\20\0\1\u0132\5\0\2\u010c\1\u0132"+
    "\2\u010c\1\0\1\u0133\1\u010c\3\0\2\u0132\3\0\6\u010c"+
    "\1\u0152\13\u010c\1\0\4\u010c\20\0\1\u0132\5\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\12\16\1\u0153\7\16"+
    "\1\0\4\16\66\0\1\u0154\34\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\3\16\1\u0155\16\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\10\16"+
    "\1\u0156\11\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\1\16\1\u0157\10\0\22\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\13\16\1\u0158"+
    "\6\16\1\0\4\16\60\0\1\u0159\42\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\u015a\11\16\1\0"+
    "\4\16\26\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\1\u015b\21\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\10\16\1\u015c\11\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\6\16"+
    "\1\u015d\13\16\1\0\4\16\26\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\1\u015e\21\16\1\0\4\16\53\0"+
    "\1\u015f\72\0\1\u0160\51\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\u0161\11\16\1\0\4\16\26\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\16\16\1\u0162"+
    "\3\16\1\0\4\16\26\0\2\16\1\0\2\16\1\120"+
    "\1\16\1\u0163\10\0\22\16\1\0\4\16\35\0\1\u0164"+
    "\65\0\2\u010c\1\u0165\2\u010c\1\0\1\u0133\1\u010c\3\0"+
    "\2\u0165\3\0\22\u010c\1\0\4\u010c\20\0\1\u0165\5\0"+
    "\2\16\1\0\2\16\1\120\1\16\1\u0166\10\0\22\16"+
    "\1\0\4\16\53\0\1\u0167\47\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\10\16\1\u0168\11\16\1\0\4\16"+
    "\26\0\2\16\1\0\2\16\1\120\2\16\10\0\14\16"+
    "\1\u0169\5\16\1\0\4\16\61\0\1\u016a\41\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\12\16\1\u016b\7\16"+
    "\1\0\4\16\26\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\22\16\1\0\4\16\20\0\1\u016c\5\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\10\16\1\u016d\11\16"+
    "\1\0\4\16\51\0\1\u016e\75\0\1\u016f\50\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u0170\6\16"+
    "\1\0\4\16\26\0\1\u010c\1\0\1\u0165\3\0\1\u0133"+
    "\1\u010c\3\0\2\u0165\3\0\22\u010c\1\0\4\u010c\20\0"+
    "\1\u0165\14\0\1\u0171\65\0\2\16\1\0\2\16\1\120"+
    "\1\16\1\u0172\10\0\22\16\1\0\4\16\115\0\1\u0173"+
    "\5\0\2\16\1\0\2\16\1\120\2\16\10\0\14\16"+
    "\1\u0174\5\16\1\0\4\16\61\0\1\u0175\77\0\1\u012a"+
    "\63\0\1\u0176\136\0\1\u0177\5\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\5\16\1\u0178\14\16\1\0\4\16"+
    "\46\0\1\u0179\54\0\2\16\1\0\2\16\1\120\1\u017a"+
    "\1\16\10\0\22\16\1\0\4\16\66\0\1\u017b\62\0"+
    "\1\u017c\100\0\1\u017d\42\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\2\16\1\u017e\17\16\1\0\4\16\60\0"+
    "\1\u017f\42\0\2\16\1\0\2\16\1\120\1\16\1\u0180"+
    "\10\0\22\16\1\0\4\16\53\0\1\u0181\55\0\1\u0182"+
    "\114\0\1\u0183\46\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\u0184\11\16\1\0\4\16\35\0\1\u0185"+
    "\65\0\2\16\1\0\2\16\1\120\2\16\10\0\22\16"+
    "\1\0\1\16\1\u0186\2\16\35\0\1\u0187\112\0\1\u0188"+
    "\136\0\1\u0189\40\0\1\u018a\130\0\1\u018b\34\0\1\u018c"+
    "\75\0\1\u018d\71\0\1\u018e\101\0\1\u018f\65\0\1\u0190"+
    "\116\0\1\u0191\35\0\1\u0192\114\0\1\u0193\76\0\1\u0194"+
    "\101\0\1\u0195\46\0\1\u0196\154\0\1\u0197\20\u0194\1\u0198"+
    "\1\u0199\53\u0194\32\0\1\u019a\77\0\1\u019b\60\0\1\u0199"+
    "\103\0\1\u019c\116\0\1\u019d\116\0\1\u019e\42\0\1\u019f"+
    "\72\0\1\u01a0\66\0\1\u01a1\101\0\1\u01a2\65\0\1\u01a3"+
    "\140\0\1\u01a4\40\0\1\u01a5\73\0\1\u01a6\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19581];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\10\1\1\11\2\1\3\11"+
    "\21\1\1\11\5\1\11\11\1\1\3\11\7\1\2\11"+
    "\5\1\1\0\6\11\10\1\2\0\2\11\46\1\6\11"+
    "\1\0\1\1\1\0\1\1\4\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\53\1\2\0\1\11\1\0\3\1"+
    "\2\0\2\1\1\11\1\1\2\0\1\11\5\1\2\0"+
    "\2\1\1\0\33\1\1\0\2\11\3\1\2\0\1\1"+
    "\1\11\1\0\5\1\2\0\1\1\1\0\14\1\1\0"+
    "\11\1\1\11\3\1\1\11\1\0\1\1\1\0\4\1"+
    "\3\0\1\1\1\0\7\1\1\0\12\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\5\1\2\0\3\1\1\11\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\3\0\1\1\1\0\1\1\3\0\1\1\1\0"+
    "\1\1\3\0\1\1\1\0\2\1\16\0\1\11\1\0"+
    "\1\1\1\11\10\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  CfscriptLexerConfiguration myCurrentConfiguration = new CfscriptLexerConfiguration();
  private Project myProject;

  public class CfscriptLexerConfiguration {
      public int mySharpCounter = 0;
      public int myCommentCounter = 0;
      public Stack<Integer> myReturnStack = new Stack<Integer>();

      public CfscriptLexerConfiguration() {}

      public CfscriptLexerConfiguration(int sharpCounter, int commentCounter,
                                        Stack<Integer> returnStack) {
          mySharpCounter = sharpCounter;
          myCommentCounter = commentCounter;
          myReturnStack = returnStack;
      }

      public void reset() {
          mySharpCounter = 0;
          myCommentCounter = 0;
          myReturnStack.clear();
      }
  }

  public _CfscriptLexer(Project project) {
    this((java.io.Reader)null);
    myProject = project;
  }
  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myCommentCounter = 0;
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }


  _CfscriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CfscriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1810) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    yychar = zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    myCurrentConfiguration.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 116: 
          { return CfscriptTokenTypes.VARIABLENAME_TYPE;
          }
        case 120: break;
        case 5: 
          { return CfscriptTokenTypes.MINUS;
          }
        case 121: break;
        case 96: 
          { return CfscriptTokenTypes.RETURN_KEYWORD;
          }
        case 122: break;
        case 65: 
          { return CfscriptTokenTypes.NOT_L;
          }
        case 123: break;
        case 4: 
          { return CfscriptTokenTypes.NOT;
          }
        case 124: break;
        case 92: 
          { return CfscriptTokenTypes.WHILE_KEYWORD;
          }
        case 125: break;
        case 22: 
          { return CfscriptTokenTypes.R_SQUAREBRACKET;
          }
        case 126: break;
        case 117: 
          { return CfscriptTokenTypes.PAGEENCODING_KEYWORD;
          }
        case 127: break;
        case 3: 
          { return CfscriptTokenTypes.LT;
          }
        case 128: break;
        case 111: 
          { return CfscriptTokenTypes.CONTAINS_L;
          }
        case 129: break;
        case 112: 
          { return CfscriptTokenTypes.FUNCTION_KEYWORD;
          }
        case 130: break;
        case 105: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return CfscriptTokenTypes.FOR_IN_KEYWORD;
          }
        case 131: break;
        case 21: 
          { return CfscriptTokenTypes.L_SQUAREBRACKET;
          }
        case 132: break;
        case 15: 
          { return CfscriptTokenTypes.MUL;
          }
        case 133: break;
        case 77: 
          { return CfscriptTokenTypes.COMMENT;
          }
        case 134: break;
        case 76: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return CfscriptTokenTypes.COMMENT;
          }
        case 135: break;
        case 62: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return CfmlTokenTypes.STRING_TEXT;
          }
        case 136: break;
        case 66: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return CfscriptTokenTypes.COMMENT;
          }
        case 137: break;
        case 108: 
          { return CfscriptTokenTypes.PACKAGE_KEYWORD;
          }
        case 138: break;
        case 103: 
          { return CfscriptTokenTypes.NUMERIC_TYPE;
          }
        case 139: break;
        case 42: 
          { return CfscriptTokenTypes.GTE;
          }
        case 140: break;
        case 46: 
          { return CfscriptTokenTypes.IF_KEYWORD;
          }
        case 141: break;
        case 94: 
          { return CfscriptTokenTypes.IMPORT_KEYWORD;
          }
        case 142: break;
        case 55: 
          { return CfscriptTokenTypes.GT_L;
          }
        case 143: break;
        case 71: 
          { return CfscriptTokenTypes.NOT_XOR_L;
          }
        case 144: break;
        case 37: 
          { myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
          }
        case 145: break;
        case 107: 
          { return CfscriptTokenTypes.DEFAULT_KEYWORD;
          }
        case 146: break;
        case 90: 
          { return CfscriptTokenTypes.ABORT_KEYWORD;
          }
        case 147: break;
        case 97: 
          { return CfscriptTokenTypes.BINARY_TYPE;
          }
        case 148: break;
        case 51: 
          { return CfscriptTokenTypes.LT_L;
          }
        case 149: break;
        case 83: 
          { return CfscriptTokenTypes.UUID_TYPE;
          }
        case 150: break;
        case 44: 
          { return CfscriptTokenTypes.DOUBLE;
          }
        case 151: break;
        case 75: 
          { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
          }
        case 152: break;
        case 59: 
          { return CfscriptTokenTypes.ADD_EQ;
          }
        case 153: break;
        case 6: 
          { return CfscriptTokenTypes.GT;
          }
        case 154: break;
        case 101: 
          { return CfscriptTokenTypes.PUBLIC_KEYWORD;
          }
        case 155: break;
        case 49: 
          { return CfscriptTokenTypes.MUL_EQ;
          }
        case 156: break;
        case 41: 
          { return CfscriptTokenTypes.MINUS_EQ;
          }
        case 157: break;
        case 78: 
          { return CfscriptTokenTypes.CASE_KEYWORD;
          }
        case 158: break;
        case 7: 
          { return CfscriptTokenTypes.IDENTIFIER;
          }
        case 159: break;
        case 38: 
          { return CfscriptTokenTypes.LTE;
          }
        case 160: break;
        case 57: 
          { return CfscriptTokenTypes.CONCAT_EQ;
          }
        case 161: break;
        case 33: 
          { yybegin(YYINITIAL); return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
          }
        case 162: break;
        case 10: 
          { return CfscriptTokenTypes.POINT;
          }
        case 163: break;
        case 115: 
          { return CfscriptTokenTypes.COMPONENT_KEYWORD;
          }
        case 164: break;
        case 85: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
          }
        case 165: break;
        case 61: 
          { return CfscriptTokenTypes.OR;
          }
        case 166: break;
        case 67: 
          { return CfscriptTokenTypes.FOR_KEYWORD;
          }
        case 167: break;
        case 9: 
          { return CfscriptTokenTypes.INTEGER;
          }
        case 168: break;
        case 87: 
          { return CfscriptTokenTypes.CATCH_KEYWORD;
          }
        case 169: break;
        case 56: 
          { return CfscriptTokenTypes.AND;
          }
        case 170: break;
        case 73: 
          { return CfscriptTokenTypes.XML_TYPE;
          }
        case 171: break;
        case 27: 
          { return CfscriptTokenTypes.QUESTION;
          }
        case 172: break;
        case 86: 
          { return startComment(YYINITIAL);
          }
        case 173: break;
        case 47: 
          { return CfscriptTokenTypes.EQ_L;
          }
        case 174: break;
        case 109: 
          { return CfscriptTokenTypes.PRIVATE_KEYWORD;
          }
        case 175: break;
        case 81: 
          { return CfscriptTokenTypes.BOOLEAN;
          }
        case 176: break;
        case 68: 
          { return CfscriptTokenTypes.MOD_L;
          }
        case 177: break;
        case 58: 
          { return CfscriptTokenTypes.EQEQ;
          }
        case 178: break;
        case 100: 
          { return CfscriptTokenTypes.SWITCH_KEYWORD;
          }
        case 179: break;
        case 19: 
          { return CfscriptTokenTypes.COMMA;
          }
        case 180: break;
        case 16: 
          { return CfscriptTokenTypes.L_BRACKET;
          }
        case 181: break;
        case 93: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
          }
        case 182: break;
        case 48: 
          { return CfscriptTokenTypes.DEV_EQ;
          }
        case 183: break;
        case 106: 
          { return CfscriptTokenTypes.BOOLAEN_TYPE;
          }
        case 184: break;
        case 72: 
          { return CfscriptTokenTypes.TRY_KEYWORD;
          }
        case 185: break;
        case 114: 
          { return CfscriptTokenTypes.INTERFACE_KEYWORD;
          }
        case 186: break;
        case 34: 
          { myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
          }
        case 187: break;
        case 63: 
          { return CfscriptTokenTypes.IMP_L;
          }
        case 188: break;
        case 25: 
          { return CfscriptTokenTypes.SEMICOLON;
          }
        case 189: break;
        case 113: 
          { return CfscriptTokenTypes.REQUIRED_KEYWORD;
          }
        case 190: break;
        case 74: 
          { return CfscriptTokenTypes.XOR_L;
          }
        case 191: break;
        case 8: 
          { return CfscriptTokenTypes.WHITE_SPACE;
          }
        case 192: break;
        case 88: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return CfscriptTokenTypes.VAR_KEYWORD;
          }
        case 193: break;
        case 52: 
          { return CfscriptTokenTypes.OR_L;
          }
        case 194: break;
        case 17: 
          { return CfscriptTokenTypes.CONCAT;
          }
        case 195: break;
        case 31: 
          { return CfscriptTokenTypes.POW;
          }
        case 196: break;
        case 29: 
          { return CfscriptTokenTypes.MOD;
          }
        case 197: break;
        case 45: 
          { return CfscriptTokenTypes.IN_L;
          }
        case 198: break;
        case 18: 
          { return CfmlTokenTypes.ASSIGN;
          }
        case 199: break;
        case 89: 
          { return CfscriptTokenTypes.ARRAY_TYPE;
          }
        case 200: break;
        case 119: 
          { return CfmlTokenTypes.VAR_ANNOTATION;
          }
        case 201: break;
        case 28: 
          { return CfscriptTokenTypes.ADD;
          }
        case 202: break;
        case 43: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (ArrayUtil.find(CfmlUtil.getVariableScopes(myProject), yytext().toString().toLowerCase()) != -1) {
        return CfscriptTokenTypes.SCOPE_KEYWORD;
    } else {
        return CfscriptTokenTypes.IDENTIFIER;
    }
          }
        case 203: break;
        case 80: 
          { return CfscriptTokenTypes.ELSE_KEYWORD;
          }
        case 204: break;
        case 35: 
          { yybegin(SINGLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
          }
        case 205: break;
        case 12: 
          { yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
          }
        case 206: break;
        case 23: 
          { return CfscriptTokenTypes.L_CURLYBRACKET;
          }
        case 207: break;
        case 30: 
          { return CfscriptTokenTypes.INT_DEV;
          }
        case 208: break;
        case 2: 
          { return CfscriptTokenTypes.BAD_CHARACTER;
          }
        case 209: break;
        case 20: 
          { return CfscriptTokenTypes.R_BRACKET;
          }
        case 210: break;
        case 95: 
          { return CfscriptTokenTypes.REMOTE_KEYWORD;
          }
        case 211: break;
        case 60: 
          { return CfscriptTokenTypes.INC;
          }
        case 212: break;
        case 1: 
          { return CfmlTokenTypes.COMMENT;
          }
        case 213: break;
        case 118: 
          { return CfscriptTokenTypes.NOT_CONTAINS_L;
          }
        case 214: break;
        case 69: 
          { return CfscriptTokenTypes.AND_L;
          }
        case 215: break;
        case 54: 
          { return CfscriptTokenTypes.GE_L;
          }
        case 216: break;
        case 14: 
          { return CfscriptTokenTypes.DEV;
          }
        case 217: break;
        case 24: 
          { return CfscriptTokenTypes.R_CURLYBRACKET;
          }
        case 218: break;
        case 82: 
          { return CfscriptTokenTypes.DATE_TYPE;
          }
        case 219: break;
        case 91: 
          { return CfscriptTokenTypes.BREAK_KEYWORD;
          }
        case 220: break;
        case 70: 
          { return CfscriptTokenTypes.ANY_TYPE;
          }
        case 221: break;
        case 11: 
          { yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
          }
        case 222: break;
        case 50: 
          { return CfscriptTokenTypes.LE_L;
          }
        case 223: break;
        case 36: 
          { yybegin(YYINITIAL); return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
          }
        case 224: break;
        case 110: 
          { return CfscriptTokenTypes.CONTINUE_KEYWORD;
          }
        case 225: break;
        case 98: 
          { return CfscriptTokenTypes.STRING_TYPE;
          }
        case 226: break;
        case 64: 
          { return CfscriptTokenTypes.NEQ_L;
          }
        case 227: break;
        case 84: 
          { return CfscriptTokenTypes.GUID_TYPE;
          }
        case 228: break;
        case 39: 
          { return CfscriptTokenTypes.NEQ;
          }
        case 229: break;
        case 40: 
          { return CfscriptTokenTypes.DEC;
          }
        case 230: break;
        case 53: 
          { return CfscriptTokenTypes.DO_KEYWORD;
          }
        case 231: break;
        case 102: 
          { return CfscriptTokenTypes.INCLUDE_KEYWORD;
          }
        case 232: break;
        case 104: 
          { return CfscriptTokenTypes.FINALLY_KEYWORD;
          }
        case 233: break;
        case 32: 
          { yybegin(DOUBLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
          }
        case 234: break;
        case 99: 
          { return CfscriptTokenTypes.STRUCT_TYPE;
          }
        case 235: break;
        case 79: 
          { return CfscriptTokenTypes.VOID_TYPE;
          }
        case 236: break;
        case 26: 
          { return CfscriptTokenTypes.DOTDOT;
          }
        case 237: break;
        case 13: 
          { if (myCurrentConfiguration.mySharpCounter == 0) {
        myCurrentConfiguration.myReturnStack.push(YYINITIAL);
        myCurrentConfiguration.mySharpCounter = 1;
        return CfscriptTokenTypes.OPENSHARP;
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    return CfscriptTokenTypes.CLOSESHARP;
          }
        case 238: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
